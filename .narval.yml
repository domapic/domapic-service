schemas:
  envs:
    local-service: &local-service-env
      controller_host_name: localhost
      service_port: 3100
      service_host_name: localhost
      domapic_path: .test
    docker-service: &docker-service-env
      controller_host_name: controller-container
      service_port: 3000
      service_host_name: service-container
      domapic_path: .shared
      service_extra_options: --authDisabled=172.0.0.0/8
    local-controller: &local-controller-env
      controller_host_name: localhost
      domapic_path: .test
      service_extra_options: --authDisabled=172.0.0.0/8
    docker-controller: &docker-controller-env
      controller_host_name: controller-container
      domapic_path: .shared
      controller_extra_options: --authDisabled=172.0.0.0/8 --logLevel=debug
  bind: &bind
    - lib
    - test
    - cli
    - index.js
  functional:
    clean: &clean
      local:
        command: test/functional/commands/clean.sh
      docker:
        down-volumes: true
    coverage: &functional-coverage
      enabled: false
    services:
      local-service: &local-service
        command: test/functional/commands/start-service.sh
        env: *local-service-env
      local-service-wait: &local-service-wait
        <<: *local-service
        wait-on: tcp:localhost:3000
      docker-service: &docker-service
        container: service-container
        command: test/functional/commands/start-service.sh
        env: *docker-service-env
      docker-service-wait: &docker-service-wait
        <<: *docker-service
        wait-on: tcp:controller-container:3000
      local-controller: &local-controller
        command: test/functional/commands/start-controller.sh
        env: *local-controller-env
      docker-controller: &docker-controller
        container: controller-container
        command: test/functional/commands/start-controller.sh
        env: *docker-controller-env
    test: &functional-test
      local:
        wait-on: tcp:localhost:3100
        env: *local-service-env
      docker:
        container: test-container
        wait-on: tcp:service-container:3000
        env: *docker-service-env
docker-images:
  - name: node-image
    from: node:8.11.1
    expose:
      - 3000
    add:
      - package.json
    install: test/functional/commands/install.sh
docker-containers:
  - name: controller-container
    build: node-image
    bind: *bind
  - name: service-container
    build: node-image
    bind: *bind
  - name: test-container
    build: node-image
    bind: *bind
suites:
  unit:
    - name: unit 
      test:
        specs: test/unit
      coverage:
        config:
          dir: .coverage/unit
  functional:
    - name: no-controller-provided
      describe: should print an api key valid to launch a pairing command from controller
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local: *local-service
          docker: *docker-service
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/no-controller-api-key.specs.js
          - test/functional/specs/not-connected.specs.js
      coverage: *functional-coverage
    - name: auth-api
      describe: should add or remove api keys
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local: *local-service
          docker: *docker-service
      test:
        <<: *functional-test
        specs: test/functional/specs/auth-api.specs.js
      coverage: *functional-coverage
    - name: controller-register
      describe: should register the service in controller when started 
      before: *clean
      services:
        - name: domapic-controller
          local: *local-controller
          docker: *docker-controller
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-wait
            env:
              <<: *local-service-env
              service_extra_options: --controller=http://localhost:3000 --logLevel=debug
          docker:
            <<: *docker-service-wait
            env:
              <<: *docker-service-env
              service_extra_options: --controller=http://controller-container:3000 --logLevel=debug
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/controller-register.specs.js
          - test/functional/specs/connected.specs.js
      coverage: *functional-coverage
    - name: controller-register-authentication
      describe: should register the service in controller when started, and authentication is enabled
      before: *clean
      services:
        - name: domapic-controller
          local:
            <<: *local-controller
            env:
              <<: *local-controller-env
              controller_extra_options: --authDisabled --logLevel=debug
          docker:
            <<: *docker-controller
            env:
              <<: *docker-controller-env
              controller_extra_options: --authDisabled --logLevel=debug
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-wait
            env:
              <<: *local-service-env
              service_extra_options: --controller=http://localhost:3000 --logLevel=debug --api-key=foo-api-key
          docker:
            <<: *docker-service-wait
            env:
              <<: *docker-service-env
              service_extra_options: --controller=http://controller-container:3000 --logLevel=debug --api-key=foo-api-key
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/controller-register.specs.js
          - test/functional/specs/connected.specs.js
      coverage: *functional-coverage
    - name: controller-register-authentication-failed
      describe: should fail registering the service in controller when started, and print an api key valid to launch a pairing command from controller
      before: *clean
      services:
        - name: domapic-controller
          local:
            <<: *local-controller
            env:
              <<: *local-controller-env
              controller_extra_options: --authDisabled --logLevel=debug
          docker:
            <<: *docker-controller
            env:
              <<: *docker-controller-env
              controller_extra_options: --authDisabled --logLevel=debug
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-wait
            env:
              <<: *local-service-env
              service_extra_options: --controller=http://localhost:3000 --logLevel=debug
          docker:
            <<: *docker-service-wait
            env:
              <<: *docker-service-env
              service_extra_options: --controller=http://controller-container:3000 --logLevel=debug
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/no-controller-api-key.specs.js
          - test/functional/specs/not-connected.specs.js
      coverage: *functional-coverage
    - name: update-abilities
      describe: should update abilities in controller when have changed
      before: *clean
      services:
        - name: domapic-controller
          local:
            <<: *local-controller
            env:
              <<: *local-controller-env
              get_abilities_handler: update
              get_service_handler: exists
          docker:
            <<: *docker-controller
            env:
              <<: *docker-controller-env
              get_abilities_handler: update
              get_service_handler: exists
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-wait
            env:
              <<: *local-service-env
              service_extra_options: --controller=http://localhost:3000 --logLevel=debug
          docker:
            <<: *docker-service-wait
            env:
              <<: *docker-service-env
              service_extra_options: --controller=http://controller-container:3000 --logLevel=debug
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/update-abilities.specs.js
          - test/functional/specs/connected.specs.js
      coverage: *functional-coverage
    - name: name-already-exists
      describe: should reject connection to controller when another registered service has the same name
      before: *clean
      services:
        - name: domapic-controller
          local:
            <<: *local-controller
            env:
              <<: *local-controller-env
              get_service_handler: exists-different-id
          docker:
            <<: *docker-controller
            env:
              <<: *docker-controller-env
              get_service_handler: exists-different-id
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-wait
            env:
              <<: *local-service-env
              service_extra_options: --controller=http://localhost:3000 --logLevel=debug
          docker:
            <<: *docker-service-wait
            env:
              <<: *docker-service-env
              service_extra_options: --controller=http://controller-container:3000 --logLevel=debug
      test:
        <<: *functional-test
        specs: 
          - test/functional/specs/name-already-exists.specs.js
          - test/functional/specs/not-connected.specs.js
      coverage: *functional-coverage
    - name: connection-api
      describe: should connect to controller when calling to connection api
      before: *clean
      services:
        - name: domapic-controller
          local: *local-controller
          docker: *docker-controller
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-wait
            env:
              <<: *local-service-env
              service_extra_options: --logLevel=debug
          docker:
            <<: *docker-service-wait
            env:
              <<: *docker-service-env
              service_extra_options: --logLevel=debug
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/no-controller-api-key.specs.js
          - test/functional/specs/not-connected.specs.js
          - test/functional/specs/connection-api.specs.js
          - test/functional/specs/controller-register.specs.js
      coverage: *functional-coverage
    - name: connection-api-conflict
      describe: should try to connect to controller when calling to connection api, and return conflict if service is already registered with another id
      before: *clean
      services:
        - name: domapic-controller
          local:
            <<: *local-controller
            env:
              <<: *local-controller-env
              get_service_handler: exists-different-id
          docker:
            <<: *docker-controller
            env:
              <<: *docker-controller-env
              get_service_handler: exists-different-id
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-wait
            env:
              <<: *local-service-env
              service_extra_options: --logLevel=debug
          docker:
            <<: *docker-service-wait
            env:
              <<: *docker-service-env
              service_extra_options: --logLevel=debug
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/no-controller-api-key.specs.js
          - test/functional/specs/not-connected.specs.js
          - test/functional/specs/connection-api-conflict.specs.js
          - test/functional/specs/name-already-exists.specs.js
          - test/functional/specs/not-connected.specs.js
      coverage: *functional-coverage
    - name: connection-api-unavailable
      describe: should try to connect to controller when calling to connection api, and return server unavailable if controller is unavailable
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service
          docker:
            <<: *docker-service
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/no-controller-api-key.specs.js
          - test/functional/specs/not-connected.specs.js
          - test/functional/specs/connection-api-unavailable.specs.js
          - test/functional/specs/not-connected.specs.js
      coverage: *functional-coverage
