schemas:
  bind: &bind
    - lib
    - test
    - cli
    - index.js
  coverage: &disable-coverage
      enabled: false
  functional:
    envs:
      local-service: &local-service-env
        controller_host_name: localhost
        service_port: 3100
        service_host_name: localhost
        domapic_path: .test
      docker-service: &docker-service-env
        controller_host_name: controller-container
        service_port: 3000
        service_host_name: service-container
        domapic_path: .shared
        service_extra_options: --authDisabled=172.0.0.0/8
    clean: &clean
      local:
        command: test/functional/commands/local-clean.sh
      docker:
        command: test/functional/commands/clean.sh
        down-volumes: true
    services:
      local-service: &local-service
        command: test/functional/commands/start-service.sh
        env: *local-service-env
      local-service-wait: &local-service-wait
        <<: *local-service
        wait-on: tcp:localhost:3000
      docker-service: &docker-service
        container: service-container
        command: test/functional/commands/start-service.sh
        env: *docker-service-env
      docker-service-wait: &docker-service-wait
        <<: *docker-service
        wait-on: tcp:controller-container:3000
    test: &functional-test
      local:
        wait-on: tcp:localhost:3100
        env: *local-service-env
      docker:
        container: test-container
        wait-on: tcp:service-container:3000
        env: *docker-service-env
  end-to-end:
    before: &e2e-clean
      local:
        command: test/end-to-end/commands/local-clean.sh
      docker:
        down-volumes: true
    services:
      mongodb: &e2e-mongodb-service
        name: mongodb
        docker:
          container: mongodb-container
          command: test/end-to-end/commands/mongodb-docker.sh
          env:
            domapic_path: .shared
      controller: &e2e-controller-service
        name: controller
        docker: &e2e-controller-service-docker
          container: controller-container
          command: test/end-to-end/commands/start-controller.sh
          wait-on: tcp:mongodb-container:27017
          env: &e2e-controller-service-docker-env
            controller_host_name: controller-container
            fixture: console
            domapic_path: .shared
            db_uri: mongodb://mongodb-container:27017/domapic
        local: &e2e-controller-service-local
          command: test/end-to-end/commands/start-controller.sh
          wait-on: tcp:localhost:27017
          env: &e2e-controller-service-local-env
            controller_host_name: localhost
            fixture: console
            domapic_path: .test
            db_uri: mongodb://localhost:27017/domapic
      service: &e2e-service-service
        name: service
        docker: &e2e-service-service-docker
          container: service-container
          command: test/end-to-end/commands/start-service.sh
          wait-on: tcp:controller-container:3000
          env:  &e2e-service-service-docker-env
            controller_host_name: controller-container
            service_host_name: service-container
            service_port: 3000
            service_name: console
            fixture: console
            domapic_path: .shared
        local: &e2e-service-service-local
          command: test/end-to-end/commands/start-service.sh
          wait-on: tcp:localhost:3000
          env: &e2e-service-service-local-env
            controller_host_name: localhost
            service_host_name: localhost
            service_port: 3100
            service_name: console
            fixture: console
            domapic_path: .test
      test: &e2e-test
        local: &e2e-test-local
          wait-on: tcp:localhost:3100
          env: &e2e-test-local-env
            controller_host_name: localhost
            service_host_name: localhost
            service_port: 3100
            fixture: console
        docker: &e2e-test-docker
          container: test-container
          wait-on: tcp:service-container:3000
          env: &e2e-test-docker-env
            controller_host_name: controller-container
            service_host_name: service-container
            service_port: 3000
            fixture: console
docker-images:
  - name: node-image
    from: node:8.11.1
    expose:
      - 3000
    add:
      - package.json
      - package-lock.json
    install: test/functional/commands/install.sh
  - name: mongodb-image
    from: mongo:3.6.4
    expose:
      - 27017
docker-containers:
  - name: controller-container
    build: node-image
    bind: *bind
  - name: service-container
    build: node-image
    bind: *bind
  - name: test-container
    build: node-image
    bind: *bind
  - name: mongodb-container
    build: mongodb-image
    bind: *bind
suites:
  unit:
    - name: unit 
      test:
        specs: test/unit
      coverage:
        config:
          dir: .coverage/unit
  functional:
    - name: no-controller-provided
      describe: should print an api key valid to launch a pairing command from controller
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local: *local-service
          docker: *docker-service
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/no-controller-api-key.specs.js
          - test/functional/specs/not-connected.specs.js
      coverage: *disable-coverage
    - name: auth-api
      describe: should add or remove api keys
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local: *local-service
          docker: *docker-service
      test:
        <<: *functional-test
        specs: test/functional/specs/auth-api.specs.js
      coverage: *disable-coverage
    - name: connection-api-unavailable
      describe: should try to connect to controller when calling to connection api, and return server unavailable if controller is unavailable
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service
          docker:
            <<: *docker-service
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/no-controller-api-key.specs.js
          - test/functional/specs/not-connected.specs.js
          - test/functional/specs/connection-api-unavailable.specs.js
          - test/functional/specs/not-connected.specs.js
      coverage: *disable-coverage
  end-to-end:
    - name: service-connection
      describe: Service should connect to controller when started first time if connection options are provided
      before: *e2e-clean
      services:
        - *e2e-mongodb-service
        - *e2e-controller-service
        - *e2e-service-service
      test:
        <<: *e2e-test
        specs:
          - test/end-to-end/specs/service-connection.specs.js
          - test/end-to-end/specs/console-registered.specs.js
      coverage: *disable-coverage
    - name: service-reconnection
      describe: Service should connect again to controller when restarted
      services:
        - *e2e-mongodb-service
        - *e2e-controller-service
        - *e2e-service-service
      test:
        <<: *e2e-test
        specs:
          - test/end-to-end/specs/service-connection.specs.js
          - test/end-to-end/specs/console-registered.specs.js
      coverage: *disable-coverage
    - name: service-changed-reconnection
      describe: Service should update abilities if changed when connected again to controller
      services:
        - *e2e-mongodb-service
        - name: controller
          docker:
            <<: *e2e-controller-service-docker
            env:
              <<: *e2e-controller-service-docker-env
              fixture: console-changed
          local:
            <<: *e2e-controller-service-local
            env:
              <<: *e2e-controller-service-local-env
              fixture: console-changed
        - name: service
          docker:
            <<: *e2e-service-service-docker
            env:
              <<: *e2e-service-service-docker-env
              service_port: 3050
              fixture: console-changed
          local:
            <<: *e2e-service-service-local
            env:
              <<: *e2e-service-service-local-env
              fixture: console-changed
              service_port: 3050
      test:
        local:
          <<: *e2e-test-local
          wait-on: tcp:localhost:3050
          env:
            <<: *e2e-test-local-env
            service_port: 3050
            fixture: console-changed
        docker:
          <<: *e2e-test-docker
          wait-on: tcp:service-container:3050
          env:
            <<: *e2e-test-docker-env
            service_port: 3050
            fixture: console-changed
        specs:
          - test/end-to-end/specs/service-connection.specs.js
          - test/end-to-end/specs/console-changed.specs.js
      coverage: *disable-coverage
