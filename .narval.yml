schemas:
  bind: &bind
    - lib
    - test
    - cli
    - index.js
  coverage: &disable-coverage
      enabled: false
  functional:
    envs:
      local-service: &local-service-env
        controller_host_name: localhost
        service_port: 3100
        service_host_name: localhost
        domapic_path: .test
        fixture: console
      docker-service: &docker-service-env
        controller_host_name: controller-container
        service_port: 3000
        service_host_name: service-container
        domapic_path: .shared
        service_extra_options: --authDisabled=172.0.0.0/8
        fixture: console
    clean: &clean
      local:
        command: test/functional/commands/local-clean.sh
      docker:
        command: test/functional/commands/clean.sh
        down-volumes: true
    services:
      local-service: &local-service
        command: test/functional/commands/start-service.sh
        env: *local-service-env
      local-service-auth: &local-service-auth
        command: test/functional/commands/start-service.sh
        env: &local-service-auth-env
          <<: *local-service-env
          service_extra_options: --authDisabled
      docker-service: &docker-service
        container: service-container
        command: test/functional/commands/start-service.sh
        env: *docker-service-env
      docker-service-auth: &docker-service-auth
        container: service-container
        command: test/functional/commands/start-service.sh
        env: &docker-service-auth-env
          <<: *docker-service-env
          service_extra_options: --authDisabled
    test: &functional-test
      local: &functional-test-local
        wait-on: tcp:localhost:3100
        env: *local-service-env
      docker: &functional-test-docker
        container: test-container
        wait-on: tcp:service-container:3000
        env: *docker-service-env
  end-to-end:
    before: &e2e-clean
      local:
        command: test/end-to-end/commands/local-clean.sh
      docker:
        down-volumes: true
    services:
      mongodb: &e2e-mongodb-service
        name: mongodb
        docker:
          container: mongodb-container
          command: test/end-to-end/commands/mongodb-docker.sh
          env:
            domapic_path: .shared
      controller: &e2e-controller-service
        name: controller
        docker: &e2e-controller-service-docker
          container: controller-container
          command: test/end-to-end/commands/start-controller.sh
          wait-on: tcp:mongodb-container:27017
          env: &e2e-controller-service-docker-env
            controller_host_name: controller-container
            fixture: console
            domapic_path: .shared
            db_uri: mongodb://mongodb-container:27017/domapic
        local: &e2e-controller-service-local
          command: test/end-to-end/commands/start-controller.sh
          wait-on: tcp:localhost:27017
          env: &e2e-controller-service-local-env
            controller_host_name: localhost
            fixture: console
            domapic_path: .test
            db_uri: mongodb://localhost:27017/domapic
      service: &e2e-service-service
        name: service
        docker: &e2e-service-service-docker
          container: service-container
          command: test/end-to-end/commands/start-service.sh
          wait-on:
            timeout: 120000
            resources:
              - tcp:controller-container:3000
          env:  &e2e-service-service-docker-env
            controller_host_name: controller-container
            service_host_name: service-container
            service_port: 3000
            service_name: console
            fixture: console
            domapic_path: .shared
        local: &e2e-service-service-local
          command: test/end-to-end/commands/start-service.sh
          wait-on: tcp:localhost:3000
          env: &e2e-service-service-local-env
            controller_host_name: localhost
            service_host_name: localhost
            service_port: 3100
            service_name: console
            fixture: console
            domapic_path: .test
      test: &e2e-test
        local: &e2e-test-local
          wait-on:
            timeout: 120000
            resources:
              - tcp:localhost:3100
          env: &e2e-test-local-env
            controller_host_name: localhost
            service_host_name: localhost
            service_port: 3100
            fixture: console
        docker: &e2e-test-docker
          container: test-container
          wait-on: tcp:service-container:3000
          env: &e2e-test-docker-env
            controller_host_name: controller-container
            service_host_name: service-container
            service_port: 3000
            fixture: console
docker-images:
  - name: node-image
    from: node:8.11.1
    expose:
      - 3000
    add:
      - package.json
      - package-lock.json
    install: test/functional/commands/install.sh
  - name: mongodb-image
    from: mongo:3.6.4
    expose:
      - 27017
docker-containers:
  - name: controller-container
    build: node-image
    bind: *bind
  - name: service-container
    build: node-image
    bind: *bind
  - name: module-container
    build: node-image
    bind: *bind
  - name: test-container
    build: node-image
    bind: *bind
  - name: mongodb-container
    build: mongodb-image
    bind: *bind
suites:
  unit:
    - name: unit 
      test:
        specs: test/unit
      coverage:
        config:
          dir: .coverage/unit
  functional:
    - name: no-controller-provided
      describe: should print an api key valid to launch a pairing command from controller
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local: *local-service
          docker: *docker-service
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/no-controller-api-key.specs.js
          - test/functional/specs/not-connected.specs.js
          - test/functional/specs/storage.specs.js
      coverage: *disable-coverage
    - name: auth-api
      describe: should add or remove api keys
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local: *local-service
          docker: *docker-service
      test:
        <<: *functional-test
        specs: test/functional/specs/auth-api.specs.js
      coverage: *disable-coverage
    - name: connection-api-unavailable
      describe: should try to connect to controller when calling to connection api, and return server unavailable if controller is unavailable
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service
          docker:
            <<: *docker-service
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/no-controller-api-key.specs.js
          - test/functional/specs/not-connected.specs.js
          - test/functional/specs/connection-api-unavailable.specs.js
          - test/functional/specs/not-connected.specs.js
      coverage: *disable-coverage
    - name: authentication-enabled
      describe: should not allow to use abilities api to no authenticated users
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-auth
          docker:
            <<: *docker-service-auth
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/auth-enabled.specs.js
      coverage: *disable-coverage
    - name: authentication-disabled
      describe: should allow to use abilities api to no authenticated users
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-auth
            env:
              <<: *local-service-auth-env
              fixture: console-auth-disabled
          docker:
            <<: *docker-service-auth
            env:
              <<: *docker-service-auth-env
              fixture: console-auth-disabled
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/auth-disabled.specs.js
      coverage: *disable-coverage
    - name: wrong-ability
      describe: should throw an error when trying to register a wrong ability
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-auth
            env:
              <<: *local-service-auth-env
              fixture: wrong-ability
          docker:
            <<: *docker-service-auth
            env:
              <<: *docker-service-auth-env
              fixture: wrong-ability
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/wrong-ability.specs.js
      coverage: *disable-coverage
    - name: wrong-ability-no-data
      describe: should throw an error when trying to register an ability with state and no data
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-auth
            env:
              <<: *local-service-auth-env
              fixture: wrong-ability-no-data
          docker:
            <<: *docker-service-auth
            env:
              <<: *docker-service-auth-env
              fixture: wrong-ability-no-data
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/wrong-ability-no-data.specs.js
      coverage: *disable-coverage
    - name: ability-data-types
      describe: should work as expected and validate data for each type of ability data
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-auth
            env:
              <<: *local-service-auth-env
              fixture: multiple-abilities
          docker:
            <<: *docker-service-auth
            env:
              <<: *docker-service-auth-env
              fixture: multiple-abilities
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/ability-boolean.specs.js
          - test/functional/specs/ability-string.specs.js
          - test/functional/specs/ability-string-enum.specs.js
          - test/functional/specs/ability-number.specs.js
          - test/functional/specs/ability-number-enum.specs.js
          - test/functional/specs/ability-no-data.specs.js
      coverage: *disable-coverage
    - name: ability-wrong-responses
      describe: should validate handler responses for each type of ability data
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-auth
            env:
              <<: *local-service-auth-env
              fixture: abilities-wrong-responses
          docker:
            <<: *docker-service-auth
            env:
              <<: *docker-service-auth-env
              fixture: abilities-wrong-responses
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/ability-wrong-responses.specs.js
      coverage: *disable-coverage
    - name: documentation-example
      describe: documentation example should work as expected
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-auth
            command: test/functional/commands/start-service-no-name.sh
            env: &documentation-example-local-env
              <<: *local-service-auth-env
              fixture: example
              service_extra_options: --authDisabled --initialStatus=true
          docker:
            <<: *docker-service-auth
            command: test/functional/commands/start-service-no-name.sh
            env: &documentation-example-docker-env
              <<: *docker-service-auth-env
              fixture: example
              service_extra_options: --authDisabled --initialStatus=true
      test: &documentation-example-test
        <<: *functional-test
        local:
          <<: *functional-test-local
          env:
            <<: *local-service-env
            service_name: relay-domapic-module
        docker:
          <<: *functional-test-docker
          env:
            <<: *docker-service-env
            service_name: relay-domapic-module
        specs:
          - test/functional/specs/example-api.specs.js
          - test/functional/specs/about-api.specs.js
          - test/functional/specs/config-api.specs.js
      coverage: *disable-coverage
    - name: documentation-example-cli
      describe: documentation example should work as expected when started using cli
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-auth
            command: test/functional/commands/start-cli.sh
            env: *documentation-example-local-env
          docker:
            <<: *docker-service-auth
            command: test/functional/commands/start-cli.sh
            env: *documentation-example-docker-env
      test: *documentation-example-test
      coverage: *disable-coverage
  functional-plugin:
    - name: plugin-no-controller-provided
      describe: should print an api key valid to launch a pairing command from controller
      before: *clean
      services: &plugin-service
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-auth
            env:
              <<: *local-service-auth-env
              fixture: plugin
          docker:
            <<: *docker-service-auth
            env:
              <<: *docker-service-auth-env
              fixture: plugin
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/no-controller-api-key.specs.js
          - test/functional/specs/not-connected.specs.js
      coverage: *disable-coverage
    - name: plugin-api
      describe: plugin apis should work as expected
      before: *clean
      services: *plugin-service
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/auth-api.specs.js
          - test/functional/plugin-specs/about-api.specs.js
          - test/functional/plugin-specs/config-api.specs.js
          - test/functional/plugin-specs/events-api.specs.js
          - test/functional/plugin-specs/controller-interface.specs.js
      coverage: *disable-coverage
    - name: plugin-connection-api-unavailable
      describe: should try to connect to controller when calling to connection api, and return server unavailable if controller is unavailable
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service
            env:
              <<: *local-service-env
              fixture: plugin
          docker:
            <<: *docker-service
            env:
              <<: *docker-service-env
              fixture: plugin
      test:
        <<: *functional-test
        specs:
          - test/functional/specs/no-controller-api-key.specs.js
          - test/functional/specs/not-connected.specs.js
          - test/functional/specs/connection-api-unavailable.specs.js
          - test/functional/specs/not-connected.specs.js
      coverage: *disable-coverage
    - name: plugin-cli
      describe: plugin example should work as expected when started using cli
      before: *clean
      services:
        - name: domapic-service
          abort-on-error: true
          local:
            <<: *local-service-auth
            command: test/functional/commands/start-plugin-cli.sh
            env:
              <<: *local-service-auth-env
              fixture: plugin
          docker:
            <<: *docker-service-auth
            command: test/functional/commands/start-plugin-cli.sh
            env:
              <<: *docker-service-auth-env
              fixture: plugin
      test:
        <<: *functional-test
        specs:
          - test/functional/plugin-specs/about-api.specs.js
          - test/functional/plugin-specs/config-api.specs.js
      coverage: *disable-coverage
  end-to-end:
    - name: service-connection
      describe: Service should connect to controller when started first time if connection options are provided
      before: *e2e-clean
      services:
        - *e2e-mongodb-service
        - *e2e-controller-service
        - *e2e-service-service
      test:
        <<: *e2e-test
        specs:
          - test/end-to-end/specs/service-connection.specs.js
          - test/end-to-end/specs/console-registered.specs.js
          - test/end-to-end/specs/controller-action-handler.specs.js
          - test/end-to-end/specs/controller-state-handler.specs.js
      coverage: *disable-coverage
    - name: service-reconnection
      describe: Service should connect again to controller when restarted
      services:
        - *e2e-mongodb-service
        - *e2e-controller-service
        - *e2e-service-service
      test:
        <<: *e2e-test
        specs:
          - test/end-to-end/specs/service-connection.specs.js
          - test/end-to-end/specs/console-registered.specs.js
          - test/end-to-end/specs/controller-action-handler.specs.js
          - test/end-to-end/specs/controller-state-handler.specs.js
      coverage: *disable-coverage
    - name: service-reconnection-no-config
      describe: Service should connect again to controller when restarted, even when no config is provided
      services:
        - *e2e-mongodb-service
        - *e2e-controller-service
        - name: service
          docker:
            <<: *e2e-service-service-docker
            command: test/end-to-end/commands/start-service-no-config.sh
          local:
            <<: *e2e-service-service-local
            command: test/end-to-end/commands/start-service-no-config.sh
      test:
        <<: *e2e-test
        specs:
          - test/end-to-end/specs/service-connection.specs.js
          - test/end-to-end/specs/console-registered.specs.js
          - test/end-to-end/specs/controller-action-handler.specs.js
          - test/end-to-end/specs/controller-state-handler.specs.js
      coverage: *disable-coverage
    - name: service-changed-reconnection
      describe: Service should update abilities if changed when connected again to controller
      services:
        - *e2e-mongodb-service
        - name: controller
          docker:
            <<: *e2e-controller-service-docker
            env:
              <<: *e2e-controller-service-docker-env
              fixture: console-changed
          local:
            <<: *e2e-controller-service-local
            env:
              <<: *e2e-controller-service-local-env
              fixture: console-changed
        - name: service
          docker:
            <<: *e2e-service-service-docker
            env:
              <<: *e2e-service-service-docker-env
              service_port: 3050
              fixture: console-changed
          local:
            <<: *e2e-service-service-local
            env:
              <<: *e2e-service-service-local-env
              fixture: console-changed
              service_port: 3050
      test:
        local:
          <<: *e2e-test-local
          wait-on:
            timeout: 120000
            resources:
              - tcp:localhost:3050
          env:
            <<: *e2e-test-local-env
            service_port: 3050
            fixture: console-changed
        docker:
          <<: *e2e-test-docker
          wait-on:
            timeout: 120000
            resources:
              - tcp:service-container:3050
          env:
            <<: *e2e-test-docker-env
            service_port: 3050
            fixture: console-changed
        specs:
          - test/end-to-end/specs/service-connection.specs.js
          - test/end-to-end/specs/console-changed.specs.js
          - test/end-to-end/specs/controller-action-handler.specs.js
          - test/end-to-end/specs/controller-state-handler.specs.js
      coverage: *disable-coverage
    - name: service-ability-changed-reconnection
      describe: Service should delete and create ability again if changed name or another sensible data
      services:
        - *e2e-mongodb-service
        - name: controller
          docker:
            <<: *e2e-controller-service-docker
            env:
              <<: *e2e-controller-service-docker-env
              fixture: console-ability-changed
          local:
            <<: *e2e-controller-service-local
            env:
              <<: *e2e-controller-service-local-env
              fixture: console-ability-changed
        - name: service
          docker:
            <<: *e2e-service-service-docker
            env:
              <<: *e2e-service-service-docker-env
              service_port: 3050
              fixture: console-ability-changed
          local:
            <<: *e2e-service-service-local
            env:
              <<: *e2e-service-service-local-env
              fixture: console-ability-changed
              service_port: 3050
      test:
        local:
          <<: *e2e-test-local
          wait-on:
            timeout: 120000
            resources:
              - tcp:localhost:3050
          env:
            <<: *e2e-test-local-env
            service_port: 3050
            fixture: console-ability-changed
        docker:
          <<: *e2e-test-docker
          wait-on:
            timeout: 120000
            resources:
              - tcp:service-container:3050
          env:
            <<: *e2e-test-docker-env
            service_port: 3050
            fixture: console-ability-changed
        specs:
          - test/end-to-end/specs/service-connection.specs.js
          - test/end-to-end/specs/console-ability-changed.specs.js
          - test/end-to-end/specs/controller-action-changed-handler.specs.js
          - test/end-to-end/specs/controller-state-changed-handler.specs.js
      coverage: *disable-coverage
    - name: service-name-repeated
      describe: Service should not connect to controller if service name is already defined
      before:
        local:
          command: test/end-to-end/commands/clean-service-storage.sh
          env:
            service_name: console
            domapic_path: .test
      services:
        - *e2e-mongodb-service
        - *e2e-controller-service
        - name: service
          docker:
            <<: *e2e-service-service-docker
            env:
              <<: *e2e-service-service-docker-env
              domapic_path: .shared/.domapic
          local: *e2e-service-service-local
      test:
        <<: *e2e-test
        specs:
          - test/end-to-end/specs/service-repeated.specs.js
          - test/end-to-end/specs/not-connected.specs.js
      coverage: *disable-coverage
    - name: connection-api
      describe: Service should connect to controller when using connection api
      before: *e2e-clean
      services:
        - *e2e-mongodb-service
        - *e2e-controller-service
        - name: service
          docker:
            <<: *e2e-service-service-docker
            command: test/end-to-end/commands/start-service-no-controller-config.sh
          local:
            <<: *e2e-service-service-local
            command: test/end-to-end/commands/start-service-no-controller-config.sh
      test:
        <<: *e2e-test
        specs:
          - test/end-to-end/specs/not-connected.specs.js
          - test/end-to-end/specs/console-not-registered.specs.js
          - test/end-to-end/specs/connection-api.specs.js
          - test/end-to-end/specs/service-connection.specs.js
          - test/end-to-end/specs/console-registered.specs.js
          - test/end-to-end/specs/controller-action-handler.specs.js
          - test/end-to-end/specs/controller-state-handler.specs.js
      coverage: *disable-coverage
    - name: connection-api-wrong-controller-api-key
      describe: Service should not connect to controller when using connection api with wrong controller apiKey
      before: *e2e-clean
      services:
        - *e2e-mongodb-service
        - *e2e-controller-service
        - name: service
          docker:
            <<: *e2e-service-service-docker
            command: test/end-to-end/commands/start-service-no-controller-config.sh
          local:
            <<: *e2e-service-service-local
            command: test/end-to-end/commands/start-service-no-controller-config.sh
      test:
        <<: *e2e-test
        specs:
          - test/end-to-end/specs/connection-api-wrong-key.specs.js
          - test/end-to-end/specs/not-connected.specs.js
          - test/end-to-end/specs/console-not-registered.specs.js
      coverage: *disable-coverage
  end-to-end-plugin:
    - name: plugin-connection
      describe: Plugin should connect to controller when started first time if connection options are provided
      before: *e2e-clean
      services: &plugin-e2e-services
        - *e2e-mongodb-service
        - name: controller
          docker:
            <<: *e2e-controller-service-docker
            env:
              <<: *e2e-controller-service-docker-env
              fixture: plugin
          local:
            <<: *e2e-controller-service-local
            env:
              <<: *e2e-controller-service-local-env
              fixture: plugin
        - name: service
          docker:
            <<: *e2e-service-service-docker
            env:
              <<: *e2e-service-service-docker-env
              fixture: plugin
              service_name: example-plugin
          local:
            <<: *e2e-service-service-local
            env:
              <<: *e2e-service-service-local-env
              fixture: plugin
              service_name: example-plugin
      test: &plugin-e2e-test
        local:
          <<: *e2e-test-local
          env:
            <<: *e2e-test-local-env
            fixture: plugin
            service_name: example-plugin
        docker:
          <<: *e2e-test-docker
          env:
            <<: *e2e-test-docker-env
            fixture: plugin
            service_name: example-plugin
        specs:
          - test/end-to-end/specs/service-connection.specs.js
          - test/end-to-end/plugin-specs/plugin-registered.specs.js
      coverage: *disable-coverage
    - name: plugin-reconnection
      describe: Plugin should connect again to controller when restarted
      services: *plugin-e2e-services
      test: *plugin-e2e-test
      coverage: *disable-coverage
    - name: plugin-reconnection-no-config
      describe: Plugin should connect again to controller when restarted, even when no config is provided
      services:
        - *e2e-mongodb-service
        - name: controller
          docker:
            <<: *e2e-controller-service-docker
            env:
              <<: *e2e-controller-service-docker-env
              fixture: plugin
          local:
            <<: *e2e-controller-service-local
            env:
              <<: *e2e-controller-service-local-env
              fixture: plugin
        - name: service
          docker:
            <<: *e2e-service-service-docker
            command: test/end-to-end/commands/start-service-no-config.sh
            env:
              <<: *e2e-service-service-docker-env
              fixture: plugin
              service_name: example-plugin
          local:
            <<: *e2e-service-service-local
            command: test/end-to-end/commands/start-service-no-config.sh
            env:
              <<: *e2e-service-service-local-env
              fixture: plugin
              service_name: example-plugin
      test: *plugin-e2e-test
      coverage: *disable-coverage
    - name: plugin-name-repeated
      describe: Plugin should not connect to controller if service name is already defined
      before:
        local:
          command: test/end-to-end/commands/clean-service-storage.sh
          env:
            service_name: example-plugin
            domapic_path: .test
      services:
        - *e2e-mongodb-service
        - name: controller
          docker:
            <<: *e2e-controller-service-docker
            env:
              <<: *e2e-controller-service-docker-env
              fixture: plugin
          local:
            <<: *e2e-controller-service-local
            env:
              <<: *e2e-controller-service-local-env
              fixture: plugin
        - name: service
          docker:
            <<: *e2e-service-service-docker
            env:
              <<: *e2e-service-service-docker-env
              fixture: plugin
              service_name: example-plugin
              domapic_path: .shared/.domapic
          local:
            <<: *e2e-service-service-local
            env:
              <<: *e2e-service-service-local-env
              fixture: plugin
              service_name: example-plugin
      test:
        <<: *plugin-e2e-test
        specs:
          - test/end-to-end/specs/service-repeated.specs.js
          - test/end-to-end/specs/not-connected.specs.js
      coverage: *disable-coverage
    - name: plugin-connection-api
      describe: Plugin should connect to controller when using connection api
      before: *e2e-clean
      services: &plugin-e2e-services-no-controller-config
        - *e2e-mongodb-service
        - name: controller
          docker:
            <<: *e2e-controller-service-docker
            env:
              <<: *e2e-controller-service-docker-env
              fixture: plugin
          local:
            <<: *e2e-controller-service-local
            env:
              <<: *e2e-controller-service-local-env
              fixture: plugin
        - name: service
          docker:
            <<: *e2e-service-service-docker
            command: test/end-to-end/commands/start-service-no-controller-config.sh
            env:
              <<: *e2e-service-service-docker-env
              fixture: plugin
              service_name: example-plugin
          local:
            <<: *e2e-service-service-local
            command: test/end-to-end/commands/start-service-no-controller-config.sh
            env:
              <<: *e2e-service-service-local-env
              fixture: plugin
              service_name: example-plugin
      test:
        <<: *e2e-test
        specs:
          - test/end-to-end/specs/not-connected.specs.js
          - test/end-to-end/plugin-specs/plugin-not-registered.specs.js
          - test/end-to-end/specs/connection-api.specs.js
          - test/end-to-end/specs/service-connection.specs.js
          - test/end-to-end/plugin-specs/plugin-registered.specs.js
      coverage: *disable-coverage
    - name: plugin-connection-api-wrong-controller-api-key
      describe: Plugin should not connect to controller when using connection api with wrong controller apiKey
      before: *e2e-clean
      services: *plugin-e2e-services-no-controller-config
      test:
        <<: *plugin-e2e-test
        specs:
          - test/end-to-end/specs/connection-api-wrong-key.specs.js
          - test/end-to-end/specs/not-connected.specs.js
          - test/end-to-end/plugin-specs/plugin-not-registered.specs.js
      coverage: *disable-coverage
    - name: plugin-events
      describe: Plugin should receive controller events, and controller interface should work as expected.
      before: *e2e-clean
      services:
        - *e2e-mongodb-service
        - name: controller
          docker:
            <<: *e2e-controller-service-docker
            env:
              <<: *e2e-controller-service-docker-env
              fixture: plugin-events
          local:
            <<: *e2e-controller-service-local
            env:
              <<: *e2e-controller-service-local-env
              fixture: plugin-events
        - name: service
          docker:
            <<: *e2e-service-service-docker
            env:
              <<: *e2e-service-service-docker-env
              fixture: plugin-events
              service_name: example-plugin
          local:
            <<: *e2e-service-service-local
            env:
              <<: *e2e-service-service-local-env
              fixture: plugin-events
              service_name: example-plugin
        - name: module
          docker:
            container: module-container
            command: test/end-to-end/commands/start-service.sh
            wait-on:
              timeout: 120000
              resources:
                - tcp:service-container:3000
            env:
              controller_host_name: controller-container
              service_host_name: module-container
              service_port: 3200
              service_name: console-module
              fixture: console
              domapic_path: .shared
          local:
            command: test/end-to-end/commands/start-service.sh
            wait-on: tcp:localhost:3100
            env:
              controller_host_name: localhost
              service_host_name: localhost
              service_port: 3200
              service_name: console-module
              fixture: console
              domapic_path: .test
      test: &plugin-e2e-test
        local:
          <<: *e2e-test-local
          wait-on:
            timeout: 120000
            resources:
              - tcp:localhost:3200
          env:
            <<: *e2e-test-local-env
            fixture: plugin-events
            service_name: example-plugin
            domapic_path: .test
        docker:
          <<: *e2e-test-docker
          wait-on:
            timeout: 120000
            resources:
              - tcp:module-container:3200
          env:
            <<: *e2e-test-docker-env
            fixture: plugin-events
            service_name: example-plugin
            domapic_path: .shared
        specs:
          - test/end-to-end/specs/service-connection.specs.js
          - test/end-to-end/plugin-specs/plugin-registered.specs.js
          - test/end-to-end/plugin-specs/plugin-events.specs.js
      coverage: *disable-coverage
